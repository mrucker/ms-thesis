How to use custom domains with API Gateway
    https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-edge-optimized-custom-domain-name.html
    
Integrating API Gateway with Lambda functions
    https://docs.aws.amazon.com/apigateway/latest/developerguide/getting-started-with-lambda-integration.html

Integrating API Gateway with DynamoDB
    (I think the directions are here at this location, but it isn't immediately apparent)
    https://docs.aws.amazon.com/apigateway/latest/developerguide/getting-started-aws-proxy.html

Method Proxy   -- In AWS method proxy integration, all request information is passed through to the method handler
Resource Proxy -- Same as AWS method proxy but the path information is also proxied. Because the path information is proxied you can't add anymore resources under it.
   
My API's custom domain
    https://api.thesis.markrucker.net

The general community's idea on REST API's 
    http://www.restapitutorial.com/lessons/httpmethods.html
    https://en.wikipedia.org/wiki/Representational_state_transfer#Applied_to_web_services
    https://stackoverflow.com/a/2022938/1066291

HTTP Verbs
    > Any    (Unique to AWS -- represents any Method)
    > Delete (delete)[idempodent]
    > Get    (read)  [nullipotent]
    > Head
    > Options
    > Patch
    > Post   (create)
    > Put    (update)[idempodent]

api v1
    /participants
        > POST  [create participant]
    /experiments
        > POST  [create experiment]
    /experiments/{id}
        > PUT   [update experiment]
    /observations
        > PATCH [create observation]
        
api v2
    /participants
        > POST  [create participant]
    /participants/{participantId}/experiments
        > POST  [create experiment]
    /participants/{participantId}/experiments/{experimentId}
        > PATCH   [update experiment]
    /observations
        > POST [create observation]
        
api v3
    /participants
        > POST  [create participant]  (no update means good data can't be corrupted. it doesn't prevent bad data from being written)
    /experiments
        > POST  [create experiment]   (no update means good data can't be corrupted. it doesn't prevent bad data from being written)
    /observations
        > POST  [create observations] (no update means good data can't be corrupted. it doesn't prevent bad data from being written)

api v4
    /participants
        > POST  [create participant]  (no update means good data can't be corrupted. it doesn't prevent bad data from being written)
    /participants/{participantId}/experiments
        > POST  [create experiment]   (no update means good data can't be corrupted. it doesn't prevent bad data from being written)
    /participants/{participantId}/experiments/{experimentId}/observations
        > POST  [create observations] (no update means good data can't be corrupted. it doesn't prevent bad data from being written)
        
Advantages to v4 over v1,v2,v3
    Better than v3    > More data efficient (by placing the relationship ids in the URL we prevent duplicate date transmission)
    Better than v1/v2 > By only allowing POSTS (aka, create) it is impossible for malicious actors to scrub good data. They can only add bad data.
    
api v5
    /participants
        > POST  [create participant]  (no update means good data can't be corrupted. it doesn't prevent bad data from being written)
    /participants/{participantId}/experiments
        > POST  [create experiment]   (no update means good data can't be corrupted. it doesn't prevent bad data from being written)
        > PATCH [only new fields  ]   (only new  means good data can't be corrupted. it doesn't prevent bad data from being written)
    /participants/{participantId}/experiments/{experimentId}/observations
        > POST  [create observations] (no update means good data can't be corrupted. it doesn't prevent bad data from being written)
        
Advantages to v5 over v4
    > adding the PATCH verb makes the partial post easier since we know by the verb which dynamodb action to take

